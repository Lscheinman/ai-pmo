import { API_BASE } from "./apiConfig";

/**
 * Fetch the full knowledge graph from backend
 */
// Get the whole operational graph
export async function getGraphNetwork() {
  const res = await fetch(`${API_BASE}/graph/network`);
  if (!res.ok) throw new Error("Failed to fetch graph network");
  return res.json();
}

/**
 * Send a natural language question to the AI graph plugin
 * and get an AI-generated structured + narrative response.
 */
export async function askGraphAI(question) {
  const res = await fetch(`${API_BASE}/graph/ai/query`, {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify({ question })
  });
  if (!res.ok) throw new Error("Failed to query AI Graph Assistant");
  return res.json();
}

/**
 * Find all entities connected to a given node.
 * This uses the backend so filtering is consistent with server logic.
 */
export async function getConnectedEntities(nodeId) {
  const res = await fetch(`${API_BASE}/graph/connected/${encodeURIComponent(nodeId)}`);
  if (!res.ok) throw new Error("Failed to fetch connected entities");
  return res.json();
}


export async function getGraphSummary() {
  const res = await fetch(`${API_BASE}/graph/ai/summary`);
  if (!res.ok) throw new Error("Failed to get AI Graph Summary");
  return res.json();
}


// --- AI recommendations per node ---
/**
 * Generate a summary for a specific node using AI.
 * This is used to create summaries for projects, tasks, people, etc.
 */
export async function generateNodeSummary(node_id, kind = "summary") {
  const res = await fetch(`${API_BASE}/graph/ai/node_summary`, {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify({ node_id, kind }),
  });
  if (!res.ok) throw new Error("Failed to generate node summary");
  return res.json();
}

/* Save an AI recommendation for a specific object (project, task, person, etc.)
 * This is used to store AI-generated summaries, insights, etc.
 * The `kind` field can be used to differentiate types of recommendations (e.g., summary, analysis).
 */
export async function saveGraphAiRecommendation({ object_type, object_id, kind = "summary", summary, meta = {} }) {
  const res = await fetch(`${API_BASE}/graph/ai/recommendations`, {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify({ object_type, object_id, kind, summary, meta }),
  });
  if (!res.ok) throw new Error("Failed to save AI recommendation");
  return res.json();
}

/** * List AI recommendations for a specific object type and ID.
 * This can be used to fetch summaries, insights, etc. generated by the AI.
 * The `kind` parameter can be used to filter recommendations by type.
 * If `kind` is not provided, it returns all recommendations for that object.
 */
export async function listGraphAiRecommendations({ object_type, object_id, kind, limit = 20 }) {
  const params = new URLSearchParams({ object_type, object_id, limit });
  if (kind) params.set("kind", kind);
  const res = await fetch(`${API_BASE}/graph/ai/recommendations?${params.toString()}`);
  if (!res.ok) throw new Error("Failed to list AI recommendations");
  return res.json();
}
